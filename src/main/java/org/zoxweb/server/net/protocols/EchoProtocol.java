package org.zoxweb.server.net.protocols;

import org.zoxweb.server.io.ByteBufferUtil;
import org.zoxweb.server.io.IOUtil;
import org.zoxweb.server.io.UByteArrayOutputStream;
import org.zoxweb.server.net.NIOSocketHandlerFactory;
import org.zoxweb.server.net.NIOSocket;
import org.zoxweb.server.net.PlainSessionCallback;
import org.zoxweb.server.net.ssl.SSLContextInfo;
import org.zoxweb.server.net.ssl.SSLNIOSocketHandlerFactory;
import org.zoxweb.server.net.ssl.SSLSessionCallback;
import org.zoxweb.server.task.TaskUtil;
import org.zoxweb.shared.util.InstanceCreator;

import java.io.IOException;
import java.nio.ByteBuffer;

public class EchoProtocol
{
    private final static InstanceCreator<PlainSessionCallback> echoPIC = EchoSession::new;

    private final static InstanceCreator<SSLSessionCallback> echoSIC = SSLEchoSession::new;

    public static class EchoSession
        extends PlainSessionCallback
    {
        private final  UByteArrayOutputStream ubaos = new UByteArrayOutputStream();
        @Override
        public void accept(ByteBuffer byteBuffer)
        {
            try
            {
                ByteBufferUtil.write(byteBuffer, ubaos, true);
                if (ubaos.byteAt(ubaos.size() - 1) == (byte)'\n')
                {
                    get().write(ubaos, true);
                }
            } catch (IOException e) {
                e.printStackTrace();
                IOUtil.close(get());
            }
        }
    }

    public static class SSLEchoSession
            extends SSLSessionCallback
    {

        private final UByteArrayOutputStream ubaos = new UByteArrayOutputStream();
        @Override
        public void accept(ByteBuffer byteBuffer)
        {
            try
            {
                ByteBufferUtil.write(byteBuffer, ubaos, true);
                if (ubaos.byteAt(ubaos.size() - 1) == (byte)'\n')
                {
                    get().write(ubaos, true);
                }
            } catch (IOException e) {
                e.printStackTrace();
                IOUtil.close(get());
            }
        }
    }

    public static void main(String ...args)
    {
        try
        {

            // Plain socket port not encrypted
            int port = 1025;
            // Secure socket port encrypted port
            int sPort = 1026;
            // Socket backlog
            int backlog = 128;
            // Creating the NIOSocket with and executor object
            NIOSocket nioSocket = new NIOSocket(TaskUtil.getDefaultTaskProcessor());
            // Adding the plain socket factory to process non encrypted data
            // The echoPIC is the plain socket instance creator for the EchoSession class
            nioSocket.addServerSocket(port, backlog, new NIOSocketHandlerFactory(echoPIC));



            // this section will create secure socket handler
            try
            {

                // Adding the self-signed autogenerated keystore FOR TESTING PURPOSES ONLY
                // NEVER USE IT in production
                SSLContextInfo sslContextInfo = org.zoxweb.server.security.CertKStoreUtil.generateRandomSSLContextInfo("ec", "SHA256withECDSA");
                // The echoSIC is the secure socket instance creator for the SSLEchoSession class
                SSLNIOSocketHandlerFactory sslnioSocketFactory = new SSLNIOSocketHandlerFactory(sslContextInfo, echoSIC);
                //Registering the socket and port
                nioSocket.addServerSocket(sPort, backlog, sslnioSocketFactory);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            System.exit(-1);
        }
    }

}
